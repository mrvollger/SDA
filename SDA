#!/usr/bin/env python
import os
import sys
import argparse
import subprocess 
DIR = os.path.dirname( os.path.realpath(__file__) )
CWD = os.getcwd()

# SUBREAD/ONT DEFAULTS 
minNumShared = 5
maxPosRep = 3
lrt = 1.5
minCutSize = 4
minCutLen = 9000

parser = argparse.ArgumentParser(description="",
usage="""SDA <command> [<args>]

Segmental Duplication Assembler (SDA) commands options:
	denovo		Run SDA on a denovo assembly.
	collapse	Run SDA on a specific collapsed region.

Please cite:
	Vollger MR, et al. Long-read sequence and assembly of segmental duplications. 
	Nat Methods. 2019 Jan;16(1):88-94. doi: 10.1038/s41592-018-0236-3. PMCID: PMC6382464.

""")
parser.add_argument("command", help="denovo: run SDA on a denovo assembly while distributing to a cluster.\n collapse: run SDA on a single collapsed region.", choices=["denovo", "collapse"])
parser.add_argument('--version', action='version', version='%(prog)s 1.0.0')
mode = parser.parse_args(sys.argv[1:2])


if(mode.command == "denovo"):
	parser = argparse.ArgumentParser(description=f"SDA {mode.command}", formatter_class=argparse.ArgumentDefaultsHelpFormatter, usage='''
		SDA denovo --input <input.(fofn|bam)> [<args>]
		For allowing cluster submission please add --cluster or --drmaa, these areguments are passed directly to snakemake. 
		The cluster/drmaa string must include these string: {threads} and {resources.mem}G . Below is an example using drmaa and SGE:
	
	--drmaa " -l mfree={resources.mem}G -pe serial {threads} -l h_rt=128:00:00 -V -cwd -S /bin/bash " ''')

	# set the snakemake to use 
	SMK = f"{DIR}/denovo_SDA.smk"
	#parser.add_argument("--drmaa", help=""" A string that specifies a drmma config for snakemake to use.
	#Must include {threads}, {resources.mem} and {log} (for sdterr and stdout log files). See default for a functioning SGE example.""",
	#default = '" -l mfree={resources.mem} -pe serial {threads} -e {log} -o {log} -l h_rt=128:00:00 -V -cwd -S /bin/bash "')
	parser.add_argument("--input", 
                     help="file of file names to align to the genome, or a bam containg reads aligned to the genome (softclippled recomended).")
	parser.add_argument("--species", help="species name of data base for repeat makser", default="human")
	parser.add_argument("--cluster", help="cluster configuration line for snakemake")
	parser.add_argument("--drmaa", help="drmaa configuration line for snakemake")

elif(mode.command == "collapse"):
	parser = argparse.ArgumentParser(description=f"SDA {mode.command}", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	# set the snakemake to use 
	SMK = f"{DIR}/SDA.smk"
	parser.add_argument("--coverage", help="The average aligned read depth of the genome", type=float)
	parser.add_argument("--reads", help="file with reads in it", default="reads.orig.bam" )

parser.add_argument("--ref", help="reference fasta file", default="ref.fasta")
parser.add_argument("--platform", help="type of long read.", default="subread", choices=["subread", "ccs", "ont", "SUBREAD", "CCS", "ONT"])
parser.add_argument("-t", "--threads", help="Threads for the snakemake (collapse), jobs for snakemake (denovo)", default=8, type=int)
parser.add_argument("-d", "--dir", help="directory for output files", default="sda_out")
parser.add_argument("-p","--prefix", help="prefix for output files", default="sda")
parser.add_argument("--minaln", help="Minimum alignment length", default=3000 , type=int)
parser.add_argument("--mincov", help="Set min PSV coverage instead of defualt calculation", default=None, type=int)
parser.add_argument("--maxcov", help="Set max PSV coverage instead of defualt calculation", default=None, type=int)
parser.add_argument("--bandwidth", help="bandwidth used in alignment", default=50000 , type=int)
parser.add_argument("--iterations", help="Number of times to run CC", default=10 , type=int)
parser.add_argument("--assemblers", help="""
	Which assemblers to use for local assembly. canu or wtdbg2 or both with commas and no spaces. 
	Assemblies are reported from only the first assembler unless it fails,
	in which case the second assembler is used and so on.""" ,
	default="canu,wtdbg2")
parser.add_argument("--lrt", help="Required log likelihood ratio of reads with PSV vs reads without", default=lrt , type=float)
parser.add_argument("--minNumShared", help="The minimum number of reads that must span between two PSVs", default=minNumShared , type=int)
parser.add_argument("--maxPosRep", help="The maximum number of reads that can link two PSVs and still mark an edge as negative", 
		default=maxPosRep, type=int)
parser.add_argument("--minCutSize", help="The minimum number of PSVs in a cluster", default=minCutSize, type=int)
parser.add_argument("--minCutLen", help="The minimum distance spanned by the PSVs in a cluster", default=minCutLen, type=int)
parser.add_argument("--debug", help="If set the temporary files are not deleted.", action='store_true', default=False)
args, snakeargs = parser.parse_known_args(sys.argv[2:])

# check for required inputs 
if( mode.command == "collapse" and not args.coverage ):
	parser.error('No coverage specified, add --coverage {\d+}')
if( mode.command == "denovo" and not args.input):
	parser.error('No input with reads specified, add --input with fofn or bam')
if(not os.path.exists(args.ref + ".fai")):
	parser.error(f'{args.ref} must be indexed, try samtools faidx {args.ref}')


# Update CCS defaults, if unchanged by user
if(args.platform.lower() == "ccs"):
	if(args.minNumShared == minNumShared):
		args.minNumShared = 2
	if(args.maxPosRep == maxPosRep ):
		args.maxPosRep = 1
	if(args.lrt == lrt):
		args.lrt = 1.0
	if(args.minCutSize == minCutSize):
		args.minCutSize = 2
	# can be changes on a case by case bases but not good in general. 
	#if(args.minCutLen == minCutLen):
	#	args.minCutLen = 100 


# create snakemkae command
cmd=f'''cd {DIR}/envs && source {DIR}/envs/env_python3.sh && cd {CWD} \
&& snakemake -p -j {args.threads} -s {SMK} \
'''


# add cluster config arrguments
if(mode.command == "denovo"):
    LOG = os.path.abspath( os.path.join(args.dir, "logs") )
    if(not os.path.exists(LOG)):
        os.makedirs(LOG)

    if( args.drmaa ):
        cmd += f' --drmaa " {args.drmaa} " --drmaa-log-dir {LOG} '
    elif( args.cluster ):
        if( 'sbatch' in args.cluster ):
            cmd += f' --cluster " {args.cluster} --output {LOG} " '
        else:
            cmd += f' --cluster " {args.cluster} -j y -o {LOG} " '

		

# unknown paramters will be passed to snakemake 
snakeargs = " ".join(snakeargs) 
if(len(snakeargs) > 0):
	sys.stderr.write(f"Extra arguments passed to snakemake: {snakeargs}\n\n")
	cmd += f" {snakeargs} "

# add configuration options from argprase 
cmd += " --config "
for arg in vars(args):
    if(arg not in ["threads", "cluster", "drmaa"] ):
        val = getattr(args, arg)
        if(val is not None):
            cmd += f'{arg}={val} '

	
#if( mode.command == "denovo" ):
#cmd += " --drmaa " + args.drmaa + " "

# execute snakemake 
sys.stderr.write(cmd+"\n")
subprocess.call(cmd, shell=True)


